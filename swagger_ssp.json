{
  "info": {
    "termsOfService": "",
    "version": "0.53.0",
    "contact": {
      "email": ""
    },
    "description": "Kargo API documentation",
    "title": "KSSP API"
  },
  "paths": {
    "/api_frameworks/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/ApiFramework"
              }
            }
          },
          "required": true,
          "description": "Update Api Framework"
        },
        "description": "Update Api Framework",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFramework"
                }
              }
            },
            "description": "Api Framework response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Api Framework to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Api Framework"
        ]
      },
      "get": {
        "description": "Get Api Framework",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFramework"
                }
              }
            },
            "description": "Api Framework object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Api Framework to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Api Framework"
        ]
      },
      "delete": {
        "description": "Delete Api Framework",
        "responses": {
          "204": {
            "description": "Api Framework deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Api Framework to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Api Framework"
        ]
      }
    },
    "/employee_roles/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/EmployeeRole"
              }
            }
          },
          "required": true,
          "description": "Update Employee Role"
        },
        "description": "Update Employee Role",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeRole"
                }
              }
            },
            "description": "Employee Role response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Role to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Role"
        ]
      },
      "get": {
        "description": "Get Employee Role",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeRole"
                }
              }
            },
            "description": "Employee Role object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Role to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Role"
        ]
      },
      "delete": {
        "description": "Delete Employee Role",
        "responses": {
          "204": {
            "description": "Employee Role deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Role to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Role"
        ]
      }
    },
    "/properties/{id}/brands/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/BrandTargeting"
                },
                "type": "array"
              }
            }
          },
          "required": true,
          "description": "List of \"BrandTargeting\" to be set on Properties"
        },
        "description": "Update \"BrandTargeting\" on Property",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BrandTargeting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of \"BrandTargeting\" on Property"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Property to be updated",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Property"
        ]
      },
      "get": {
        "description": "Get \"BrandTargeting\" on Property",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BrandTargeting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of \"BrandTargeting\" on Properties"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Property to retreive",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Property"
        ]
      }
    },
    "/properties/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Property"
              }
            }
          },
          "required": true,
          "description": "Add Property to the collection"
        },
        "description": "Create new Property",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            },
            "description": "Property response"
          }
        },
        "tags": [
          "Property"
        ]
      },
      "get": {
        "description": "Get list of Properties",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Property"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Properties"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Property"
        ]
      }
    },
    "/publishers/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Publisher"
              }
            }
          },
          "required": true,
          "description": "Update Publisher"
        },
        "description": "Update Publisher",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publisher"
                }
              }
            },
            "description": "Publisher response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Publisher to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Publisher"
        ]
      },
      "get": {
        "description": "Get Publisher",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publisher"
                }
              }
            },
            "description": "Publisher object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Publisher to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Publisher"
        ]
      },
      "delete": {
        "description": "Delete Publisher",
        "responses": {
          "204": {
            "description": "Publisher deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Publisher to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/api_frameworks/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/ApiFramework"
              }
            }
          },
          "required": true,
          "description": "Add Api Framework to the collection"
        },
        "description": "Create new Api Framework",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFramework"
                }
              }
            },
            "description": "Api Framework response"
          }
        },
        "tags": [
          "Api Framework"
        ]
      },
      "get": {
        "description": "Get list of Api Frameworks",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiFramework"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Api Frameworks"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Api Framework"
        ]
      }
    },
    "/mime_types/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/MimeType"
              }
            }
          },
          "required": true,
          "description": "Update Mime Type"
        },
        "description": "Update Mime Type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MimeType"
                }
              }
            },
            "description": "Mime Type response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Mime Type to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Mime Type"
        ]
      },
      "get": {
        "description": "Get Mime Type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MimeType"
                }
              }
            },
            "description": "Mime Type object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Mime Type to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Mime Type"
        ]
      },
      "delete": {
        "description": "Delete Mime Type",
        "responses": {
          "204": {
            "description": "Mime Type deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Mime Type to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Mime Type"
        ]
      }
    },
    "/grapeshot_categories/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/GrapeshotCategory"
              }
            }
          },
          "required": true,
          "description": "Update Grapeshot Category"
        },
        "description": "Update Grapeshot Category",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrapeshotCategory"
                }
              }
            },
            "description": "Grapeshot Category response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Grapeshot Category to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Grapeshot Category"
        ]
      },
      "get": {
        "description": "Get Grapeshot Category",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrapeshotCategory"
                }
              }
            },
            "description": "Grapeshot Category object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Grapeshot Category to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Grapeshot Category"
        ]
      },
      "delete": {
        "description": "Delete Grapeshot Category",
        "responses": {
          "204": {
            "description": "Grapeshot Category deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Grapeshot Category to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Grapeshot Category"
        ]
      }
    },
    "/creative_approvals/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/BaseApproval"
              }
            }
          },
          "required": true,
          "description": "Update Base Approval"
        },
        "description": "Update Base Approval",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApproval"
                }
              }
            },
            "description": "Base Approval response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Base Approval to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Base Approval"
        ]
      },
      "get": {
        "description": "Get Base Approval",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApproval"
                }
              }
            },
            "description": "Base Approval object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Base Approval to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Base Approval"
        ]
      },
      "delete": {
        "description": "Delete Base Approval",
        "responses": {
          "204": {
            "description": "Base Approval deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Base Approval to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Base Approval"
        ]
      }
    },
    "/deals/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Deals"
              }
            }
          },
          "required": true,
          "description": "Add Deal to the collection"
        },
        "description": "Create new Deal",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deals"
                }
              }
            },
            "description": "Deal response"
          }
        },
        "tags": [
          "Deal"
        ]
      },
      "get": {
        "description": "Get list of Deals",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Deals"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Deals"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Deal"
        ]
      }
    },
    "/publishers/{id}/brands/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/BrandTargeting"
                },
                "type": "array"
              }
            }
          },
          "required": true,
          "description": "List of \"BrandTargeting\" to be set on Publishers"
        },
        "description": "Update \"BrandTargeting\" on Publisher",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BrandTargeting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of \"BrandTargeting\" on Publisher"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Publisher to be updated",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Publisher"
        ]
      },
      "get": {
        "description": "Get \"BrandTargeting\" on Publisher",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BrandTargeting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of \"BrandTargeting\" on Publishers"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Publisher to retreive",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    },
    "/segments/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Segments"
              }
            }
          },
          "required": true,
          "description": "Add Segment to the collection"
        },
        "description": "Create new Segment",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segments"
                }
              }
            },
            "description": "Segment response"
          }
        },
        "tags": [
          "Segment"
        ]
      },
      "get": {
        "description": "Get list of Segments",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Segments"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Segments"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Segment"
        ]
      }
    },
    "/grapeshot_categories/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/GrapeshotCategory"
              }
            }
          },
          "required": true,
          "description": "Add Grapeshot Category to the collection"
        },
        "description": "Create new Grapeshot Category",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrapeshotCategory"
                }
              }
            },
            "description": "Grapeshot Category response"
          }
        },
        "tags": [
          "Grapeshot Category"
        ]
      },
      "get": {
        "description": "Get list of Grapeshot Categories",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GrapeshotCategory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Grapeshot Categories"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Grapeshot Category"
        ]
      }
    },
    "/brands/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Brand"
              }
            }
          },
          "required": true,
          "description": "Update Brand"
        },
        "description": "Update Brand",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            },
            "description": "Brand response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Brand to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Brand"
        ]
      },
      "get": {
        "description": "Get Brand",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            },
            "description": "Brand object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Brand to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Brand"
        ]
      },
      "delete": {
        "description": "Delete Brand",
        "responses": {
          "204": {
            "description": "Brand deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Brand to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Brand"
        ]
      }
    },
    "/ad_formats/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/AdFormats"
              }
            }
          },
          "required": true,
          "description": "Add Ad Format to the collection"
        },
        "description": "Create new Ad Format",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdFormats"
                }
              }
            },
            "description": "Ad Format response"
          }
        },
        "tags": [
          "Ad Format"
        ]
      },
      "get": {
        "description": "Get list of Ad Formats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AdFormats"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Ad Formats"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Ad Format"
        ]
      }
    },
    "/ad_formats/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/AdFormats"
              }
            }
          },
          "required": true,
          "description": "Update Ad Format"
        },
        "description": "Update Ad Format",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdFormats"
                }
              }
            },
            "description": "Ad Format response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Format to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Format"
        ]
      },
      "get": {
        "description": "Get Ad Format",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdFormats"
                }
              }
            },
            "description": "Ad Format object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Format to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Format"
        ]
      },
      "delete": {
        "description": "Delete Ad Format",
        "responses": {
          "204": {
            "description": "Ad Format deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Format to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Format"
        ]
      }
    },
    "/data_centers/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/DataCenter"
              }
            }
          },
          "required": true,
          "description": "Update Data Center"
        },
        "description": "Update Data Center",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCenter"
                }
              }
            },
            "description": "Data Center response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Data Center to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Data Center"
        ]
      },
      "get": {
        "description": "Get Data Center",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCenter"
                }
              }
            },
            "description": "Data Center object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Data Center to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Data Center"
        ]
      },
      "delete": {
        "description": "Delete Data Center",
        "responses": {
          "204": {
            "description": "Data Center deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Data Center to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Data Center"
        ]
      }
    },
    "/segments/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Segments"
              }
            }
          },
          "required": true,
          "description": "Update Segment"
        },
        "description": "Update Segment",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segments"
                }
              }
            },
            "description": "Segment response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Segment to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Segment"
        ]
      },
      "get": {
        "description": "Get Segment",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segments"
                }
              }
            },
            "description": "Segment object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Segment to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Segment"
        ]
      },
      "delete": {
        "description": "Delete Segment",
        "responses": {
          "204": {
            "description": "Segment deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Segment to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Segment"
        ]
      }
    },
    "/bidders/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Bidder"
              }
            }
          },
          "required": true,
          "description": "Add Bidder to the collection"
        },
        "description": "Create new Bidder",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bidder"
                }
              }
            },
            "description": "Bidder response"
          }
        },
        "tags": [
          "Bidder"
        ]
      },
      "get": {
        "description": "Get list of Bidders",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Bidder"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Bidders"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Bidder"
        ]
      }
    },
    "/seats/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/NewSeat"
              }
            }
          },
          "required": true,
          "description": "Add New Seat to the collection"
        },
        "description": "Create new New Seat",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewSeat"
                }
              }
            },
            "description": "New Seat response"
          }
        },
        "tags": [
          "New Seat"
        ]
      },
      "get": {
        "description": "Get list of New Seats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NewSeat"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of New Seats"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "New Seat"
        ]
      }
    },
    "/employees/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Employee"
              }
            }
          },
          "required": true,
          "description": "Add Employee to the collection"
        },
        "description": "Create new Employee",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            },
            "description": "Employee response"
          }
        },
        "tags": [
          "Employee"
        ]
      },
      "get": {
        "description": "Get list of Employees",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Employees"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Employee"
        ]
      }
    },
    "/employee_groups/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/EmployeeGroup"
              }
            }
          },
          "required": true,
          "description": "Add Employee Group to the collection"
        },
        "description": "Create new Employee Group",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeGroup"
                }
              }
            },
            "description": "Employee Group response"
          }
        },
        "tags": [
          "Employee Group"
        ]
      },
      "get": {
        "description": "Get list of Employee Groups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Employee Groups"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Employee Group"
        ]
      }
    },
    "/deals/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Deals"
              }
            }
          },
          "required": true,
          "description": "Update Deal"
        },
        "description": "Update Deal",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deals"
                }
              }
            },
            "description": "Deal response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Deal to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Deal"
        ]
      },
      "get": {
        "description": "Get Deal",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deals"
                }
              }
            },
            "description": "Deal object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Deal to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Deal"
        ]
      },
      "delete": {
        "description": "Delete Deal",
        "responses": {
          "204": {
            "description": "Deal deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Deal to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Deal"
        ]
      }
    },
    "/seller_regions/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/SellerRegion"
              }
            }
          },
          "required": true,
          "description": "Update Seller Region"
        },
        "description": "Update Seller Region",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerRegion"
                }
              }
            },
            "description": "Seller Region response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Seller Region to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Seller Region"
        ]
      },
      "get": {
        "description": "Get Seller Region",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerRegion"
                }
              }
            },
            "description": "Seller Region object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Seller Region to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Seller Region"
        ]
      },
      "delete": {
        "description": "Delete Seller Region",
        "responses": {
          "204": {
            "description": "Seller Region deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Seller Region to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Seller Region"
        ]
      }
    },
    "/seller_regions/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/SellerRegion"
              }
            }
          },
          "required": true,
          "description": "Add Seller Region to the collection"
        },
        "description": "Create new Seller Region",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerRegion"
                }
              }
            },
            "description": "Seller Region response"
          }
        },
        "tags": [
          "Seller Region"
        ]
      },
      "get": {
        "description": "Get list of Seller Regions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SellerRegion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Seller Regions"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Seller Region"
        ]
      }
    },
    "/data_centers/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/DataCenter"
              }
            }
          },
          "required": true,
          "description": "Add Data Center to the collection"
        },
        "description": "Create new Data Center",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCenter"
                }
              }
            },
            "description": "Data Center response"
          }
        },
        "tags": [
          "Data Center"
        ]
      },
      "get": {
        "description": "Get list of Data Centers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataCenter"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Data Centers"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Data Center"
        ]
      }
    },
    "/ad_slots/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/AdSlots"
              }
            }
          },
          "required": true,
          "description": "Add Ad Slot to the collection"
        },
        "description": "Create new Ad Slot",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdSlots"
                }
              }
            },
            "description": "Ad Slot response"
          }
        },
        "tags": [
          "Ad Slot"
        ]
      },
      "get": {
        "description": "Get list of Ad Slots",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AdSlots"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Ad Slots"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Ad Slot"
        ]
      }
    },
    "/video_protocols/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/VideoProtocol"
              }
            }
          },
          "required": true,
          "description": "Add Video Protocol to the collection"
        },
        "description": "Create new Video Protocol",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoProtocol"
                }
              }
            },
            "description": "Video Protocol response"
          }
        },
        "tags": [
          "Video Protocol"
        ]
      },
      "get": {
        "description": "Get list of Video Protocols",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VideoProtocol"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Video Protocols"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Video Protocol"
        ]
      }
    },
    "/seats/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/NewSeat"
              }
            }
          },
          "required": true,
          "description": "Update New Seat"
        },
        "description": "Update New Seat",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewSeat"
                }
              }
            },
            "description": "New Seat response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of New Seat to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "New Seat"
        ]
      },
      "get": {
        "description": "Get New Seat",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewSeat"
                }
              }
            },
            "description": "New Seat object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of New Seat to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "New Seat"
        ]
      },
      "delete": {
        "description": "Delete New Seat",
        "responses": {
          "204": {
            "description": "New Seat deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of New Seat to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "New Seat"
        ]
      }
    },
    "/properties/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Property"
              }
            }
          },
          "required": true,
          "description": "Update Property"
        },
        "description": "Update Property",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            },
            "description": "Property response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Property to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Property"
        ]
      },
      "get": {
        "description": "Get Property",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            },
            "description": "Property object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Property to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Property"
        ]
      },
      "delete": {
        "description": "Delete Property",
        "responses": {
          "204": {
            "description": "Property deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Property to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Property"
        ]
      }
    },
    "/employee_groups/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/EmployeeGroup"
              }
            }
          },
          "required": true,
          "description": "Update Employee Group"
        },
        "description": "Update Employee Group",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeGroup"
                }
              }
            },
            "description": "Employee Group response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Group to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Group"
        ]
      },
      "get": {
        "description": "Get Employee Group",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeGroup"
                }
              }
            },
            "description": "Employee Group object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Group to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Group"
        ]
      },
      "delete": {
        "description": "Delete Employee Group",
        "responses": {
          "204": {
            "description": "Employee Group deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee Group to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee Group"
        ]
      }
    },
    "/employees/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Employee"
              }
            }
          },
          "required": true,
          "description": "Update Employee"
        },
        "description": "Update Employee",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            },
            "description": "Employee response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee"
        ]
      },
      "get": {
        "description": "Get Employee",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            },
            "description": "Employee object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee"
        ]
      },
      "delete": {
        "description": "Delete Employee",
        "responses": {
          "204": {
            "description": "Employee deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Employee to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Employee"
        ]
      }
    },
    "/creative_approvals/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/BaseApproval"
              }
            }
          },
          "required": true,
          "description": "Add Base Approval to the collection"
        },
        "description": "Create new Base Approval",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApproval"
                }
              }
            },
            "description": "Base Approval response"
          }
        },
        "tags": [
          "Base Approval"
        ]
      },
      "get": {
        "description": "Get list of Base Approvals",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaseApproval"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Base Approvals"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Base Approval"
        ]
      }
    },
    "/employee_roles/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/EmployeeRole"
              }
            }
          },
          "required": true,
          "description": "Add Employee Role to the collection"
        },
        "description": "Create new Employee Role",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeRole"
                }
              }
            },
            "description": "Employee Role response"
          }
        },
        "tags": [
          "Employee Role"
        ]
      },
      "get": {
        "description": "Get list of Employee Roles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmployeeRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Employee Roles"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Employee Role"
        ]
      }
    },
    "/brands/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Brand"
              }
            }
          },
          "required": true,
          "description": "Add Brand to the collection"
        },
        "description": "Create new Brand",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            },
            "description": "Brand response"
          }
        },
        "tags": [
          "Brand"
        ]
      },
      "get": {
        "description": "Get list of Brands",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Brand"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Brands"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Brand"
        ]
      }
    },
    "/video_protocols/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/VideoProtocol"
              }
            }
          },
          "required": true,
          "description": "Update Video Protocol"
        },
        "description": "Update Video Protocol",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoProtocol"
                }
              }
            },
            "description": "Video Protocol response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Video Protocol to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Video Protocol"
        ]
      },
      "get": {
        "description": "Get Video Protocol",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoProtocol"
                }
              }
            },
            "description": "Video Protocol object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Video Protocol to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Video Protocol"
        ]
      },
      "delete": {
        "description": "Delete Video Protocol",
        "responses": {
          "204": {
            "description": "Video Protocol deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Video Protocol to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Video Protocol"
        ]
      }
    },
    "/history/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/GlobalHistory"
              }
            }
          },
          "required": true,
          "description": "Update Global History"
        },
        "description": "Update Global History",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalHistory"
                }
              }
            },
            "description": "Global History response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Global History to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Global History"
        ]
      },
      "get": {
        "description": "Get Global History",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalHistory"
                }
              }
            },
            "description": "Global History object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Global History to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Global History"
        ]
      },
      "delete": {
        "description": "Delete Global History",
        "responses": {
          "204": {
            "description": "Global History deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Global History to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Global History"
        ]
      }
    },
    "/mime_types/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/MimeType"
              }
            }
          },
          "required": true,
          "description": "Add Mime Type to the collection"
        },
        "description": "Create new Mime Type",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MimeType"
                }
              }
            },
            "description": "Mime Type response"
          }
        },
        "tags": [
          "Mime Type"
        ]
      },
      "get": {
        "description": "Get list of Mime Types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MimeType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Mime Types"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Mime Type"
        ]
      }
    },
    "/datacenter_regions/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/DatacenterRegion"
              }
            }
          },
          "required": true,
          "description": "Update Datacenter Region"
        },
        "description": "Update Datacenter Region",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterRegion"
                }
              }
            },
            "description": "Datacenter Region response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Datacenter Region to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Datacenter Region"
        ]
      },
      "get": {
        "description": "Get Datacenter Region",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterRegion"
                }
              }
            },
            "description": "Datacenter Region object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Datacenter Region to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Datacenter Region"
        ]
      },
      "delete": {
        "description": "Delete Datacenter Region",
        "responses": {
          "204": {
            "description": "Datacenter Region deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Datacenter Region to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Datacenter Region"
        ]
      }
    },
    "/bidders/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Bidder"
              }
            }
          },
          "required": true,
          "description": "Update Bidder"
        },
        "description": "Update Bidder",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bidder"
                }
              }
            },
            "description": "Bidder response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Bidder to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Bidder"
        ]
      },
      "get": {
        "description": "Get Bidder",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bidder"
                }
              }
            },
            "description": "Bidder object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Bidder to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Bidder"
        ]
      },
      "delete": {
        "description": "Delete Bidder",
        "responses": {
          "204": {
            "description": "Bidder deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Bidder to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Bidder"
        ]
      }
    },
    "/datacenter_regions/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/DatacenterRegion"
              }
            }
          },
          "required": true,
          "description": "Add Datacenter Region to the collection"
        },
        "description": "Create new Datacenter Region",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterRegion"
                }
              }
            },
            "description": "Datacenter Region response"
          }
        },
        "tags": [
          "Datacenter Region"
        ]
      },
      "get": {
        "description": "Get list of Datacenter Regions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatacenterRegion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Datacenter Regions"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Datacenter Region"
        ]
      }
    },
    "/history/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/GlobalHistory"
              }
            }
          },
          "required": true,
          "description": "Add Global History to the collection"
        },
        "description": "Create new Global History",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalHistory"
                }
              }
            },
            "description": "Global History response"
          }
        },
        "tags": [
          "Global History"
        ]
      },
      "get": {
        "description": "Get list of Global Histories",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GlobalHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Global Histories"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Global History"
        ]
      }
    },
    "/ad_slots/{id}/": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/AdSlots"
              }
            }
          },
          "required": true,
          "description": "Update Ad Slot"
        },
        "description": "Update Ad Slot",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdSlots"
                }
              }
            },
            "description": "Ad Slot response"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Slot to update",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Slot"
        ]
      },
      "get": {
        "description": "Get Ad Slot",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdSlots"
                }
              }
            },
            "description": "Ad Slot object"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Slot to retrieve",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Slot"
        ]
      },
      "delete": {
        "description": "Delete Ad Slot",
        "responses": {
          "204": {
            "description": "Ad Slot deleted"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of Ad Slot to delete",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Ad Slot"
        ]
      }
    },
    "/publishers/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Publisher"
              }
            }
          },
          "required": true,
          "description": "Add Publisher to the collection"
        },
        "description": "Create new Publisher",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publisher"
                }
              }
            },
            "description": "Publisher response"
          }
        },
        "tags": [
          "Publisher"
        ]
      },
      "get": {
        "description": "Get list of Publishers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Publisher"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A paged array of Publishers"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Current page number",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Items per page",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Query pattern: ...&query=My creative&...",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order by paramenter: ...&order_by=-id&..., ...&order_by=+name&...",
            "name": "order_by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Publisher"
        ]
      }
    }
  },
  "components": {
    "requestBodies": {
      "VideoProtocol": {
        "description": "Video ads protocols (VAST/VPAID)",
        "title": "VideoProtocol",
        "additionalProperties": false,
        "required": [
          "name",
          "version",
          "title"
        ],
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Flag indicating if this protocol is enabled"
          },
          "version": {
            "type": "string",
            "description": "Video protocol version"
          },
          "name": {
            "type": "string",
            "description": "Video protocol name"
          },
          "is_wrapper": {
            "type": "boolean",
            "description": "Flag indicating type of protocol (wrapper or inline)"
          },
          "title": {
            "type": "string",
            "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
          }
        }
      },
      "BannerAdSlot": {
        "additionalProperties": false,
        "required": [
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        },
        "title": "BannerAdSlot"
      },
      "PrivateAuctionDeal": {
        "description": "Private auction deal",
        "title": "PrivateAuctionDeal",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "start_date",
          "end_date",
          "bid_floor",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "bid_floor": {
            "type": "number",
            "description": "Bid floor. > 0"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "Segments": {
        "anyOf": [
          {
            "$ref": "#/components/requestBodies/MasSegment"
          },
          {
            "$ref": "#/components/requestBodies/KruxSegment"
          }
        ]
      },
      "VideoAdSlot": {
        "additionalProperties": false,
        "required": [
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner/video/banner-video/banner-native/banner-video-native"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        },
        "title": "VideoAdSlot"
      },
      "MasSegment": {
        "description": "MAS segment",
        "title": "MasSegment",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "segment_id_long"
        ],
        "type": "object",
        "properties": {
          "plain_category": {
            "type": "string",
            "description": "Segment category"
          },
          "segment_type": {
            "type": "string",
            "description": "Segment type"
          },
          "sub_category": {
            "type": "string",
            "description": "Segment sub-category"
          },
          "name": {
            "type": "string",
            "description": "Segment name"
          },
          "last_compute_date": {
            "type": "string",
            "description": "Last compute date"
          },
          "type": {
            "type": "string",
            "description": "Internal type"
          },
          "segment_id_long": {
            "type": "string",
            "description": "Segment id, can not be changed once set, unique across all segments"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        }
      },
      "NewSeat": {
        "description": "Seat",
        "title": "NewSeat",
        "additionalProperties": false,
        "required": [
          "name",
          "external_id",
          "bidder"
        ],
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "Seat external ID"
          },
          "bidder": {
            "type": "object",
            "description": "Seat parent bidder",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Bidder internal ID"
              },
              "name": {
                "type": "string",
                "description": "Bidder name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Seat name"
          }
        }
      },
      "Employee": {
        "description": "Employee",
        "title": "Employee",
        "additionalProperties": false,
        "required": [
          "last_name",
          "first_name",
          "email",
          "employee_group",
          "employee_roles"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Employee email"
          },
          "employee_group": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "Employee group internal ID"
              },
              "name": {
                "type": "string",
                "description": "Employee group name"
              }
            }
          },
          "last_name": {
            "type": "string",
            "description": "Employee last name"
          },
          "name": {
            "type": "string",
            "description": "Employee name (first_name + last_name), optional"
          },
          "employee_roles": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "Employee role internal ID"
                },
                "name": {
                  "type": "string",
                  "description": "Employee role name"
                }
              }
            },
            "type": "array",
            "description": "List of employee roles"
          },
          "first_name": {
            "type": "string",
            "description": "Employee first name"
          },
          "seller_region": {
            "type": "object",
            "description": "Seller region of employee, required only if 'Key Account Manager' or 'Sales Manager' in 'employee_roles' names",
            "properties": {
              "id": {
                "type": "number",
                "description": "Seller region group internal ID"
              },
              "name": {
                "type": "string",
                "description": "Seller region group name"
              }
            }
          }
        }
      },
      "VideoAdFormat": {
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        },
        "title": "VideoAdFormat"
      },
      "GrapeshotCategory": {
        "additionalProperties": false,
        "required": [
          "name",
          "key"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "key": {
            "type": "string",
            "description": "Key"
          }
        },
        "title": "GrapeshotCategory"
      },
      "MimeType": {
        "description": "MIME type",
        "title": "MimeType",
        "additionalProperties": false,
        "required": [
          "name",
          "mime_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "MIME type name"
          },
          "mime_type": {
            "type": "string",
            "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
          }
        }
      },
      "DatacenterRegion": {
        "additionalProperties": true,
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "title": "DatacenterRegion"
      },
      "BannerVideoAdSlot": {
        "additionalProperties": false,
        "required": [
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        },
        "title": "BannerVideoAdSlot"
      },
      "EmployeeGroup": {
        "description": "Employee group",
        "title": "EmployeeGroup",
        "additionalProperties": false,
        "required": [
          "name",
          "group_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Employee group name"
          },
          "group_type": {
            "type": "string",
            "description": "Employee group type, can be \"admin\" or \"standard\" only"
          }
        }
      },
      "Brand": {
        "additionalProperties": false,
        "required": [
          "name",
          "is_open_auction_allowed",
          "is_pmp_allowed",
          "advertiser_domains"
        ],
        "type": "object",
        "properties": {
          "is_open_auction_allowed": {
            "type": "boolean",
            "description": "Is open auction allowed"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Unique across all brands"
          },
          "is_pmp_allowed": {
            "type": "boolean",
            "description": "Is PMP allowed"
          },
          "name": {
            "type": "string"
          },
          "advertiser_domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of strings. Each domain is unique across all brands. At least one of advertiser_domains are required"
          }
        },
        "title": "Brand"
      },
      "NativeAdFormat": {
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        },
        "title": "NativeAdFormat"
      },
      "AdSlots": {
        "anyOf": [
          {
            "$ref": "#/components/requestBodies/BannerAdSlot"
          },
          {
            "$ref": "#/components/requestBodies/VideoAdSlot"
          },
          {
            "$ref": "#/components/requestBodies/BannerVideoAdSlot"
          },
          {
            "$ref": "#/components/requestBodies/BannerNativeAdSlot"
          },
          {
            "$ref": "#/components/requestBodies/BannerVideoNativeAdSlot"
          }
        ]
      },
      "AdFormats": {
        "anyOf": [
          {
            "$ref": "#/components/requestBodies/VideoAdFormat"
          },
          {
            "$ref": "#/components/requestBodies/NativeAdFormat"
          },
          {
            "$ref": "#/components/requestBodies/BannerAdFormat"
          }
        ]
      },
      "BannerNativeAdSlot": {
        "additionalProperties": false,
        "required": [
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_native_eligible_for_pmp",
          "is_native_eligible_for_open"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "native_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_native_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "is_native_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_open must be checked"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "native_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field native_advertiser_floor"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        },
        "title": "BannerNativeAdSlot"
      },
      "GlobalHistory": {
        "additionalProperties": false,
        "required": [
          "action",
          "datetime",
          "data",
          "user",
          "entity"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "datetime": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "user": {
            "type": "object",
            "nullable": true
          },
          "entity": {
            "type": "object"
          }
        },
        "title": "GlobalHistory"
      },
      "Publisher": {
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Status. Can be 1(Active) or 2(Inactive)"
          },
          "name": {
            "type": "string",
            "description": "Publisher name"
          },
          "pricing_type": {
            "type": "string",
            "description": "Can accept these values: revshare, daily_revshare, cpm. Required and shown only if private_autcion_payout_model == 'revshare' OR preferred_fixed_rate_payout_model == 'revshare' OR open_auction_payout_model == 'revshare'. In other cases must be null."
          },
          "private_auction_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "open_auction_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "open_auction_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          },
          "private_auction_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          },
          "ad_format_floors": {
            "items": {
              "type": "object",
              "properties": {
                "floor_cpm": {
                  "type": "number",
                  "description": "Corresponding ad format floor"
                },
                "private_auction_pmp_floor_cpm": {
                  "type": "number",
                  "description": "Read only. floor_cpm / private_auction_revshare_value"
                },
                "ad_format": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Internal AdFormat id. Must actually exists"
                    }
                  }
                },
                "preferred_fixed_rate_pmp_floor_cpm": {
                  "type": "number",
                  "description": "Read only. floor_cpm / preferred_fixed_rate_revshare_value"
                }
              }
            },
            "type": "array",
            "description": "Ad format floors array. Must not contain duplicated ad formats, floor must be >= 0, ad formats must exist"
          },
          "external_id": {
            "type": "string",
            "description": "Publisher external id. Unique per all publishers"
          },
          "preferred_fixed_rate_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "preferred_fixed_rate_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          }
        },
        "title": "Publisher"
      },
      "BannerAdFormat": {
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        },
        "title": "BannerAdFormat"
      },
      "ProgrammaticGuaranteedDeal": {
        "description": "Programmatic guaranteed deal",
        "title": "ProgrammaticGuaranteedDeal",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "external_id",
          "start_date",
          "end_date",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "PreferredFixedPriceDeal": {
        "description": "Preferred fixed price deal",
        "title": "PreferredFixedPriceDeal",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "start_date",
          "end_date",
          "first_look_cpm",
          "priority",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "priority": {
            "type": "string",
            "description": "Deal priority. Can be lowest/standard/highest"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "first_look_cpm": {
            "type": "number",
            "description": "First look CPM. > 0"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "EmployeeRole": {
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "title": "EmployeeRole"
      },
      "BannerVideoNativeAdSlot": {
        "additionalProperties": false,
        "required": [
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_native_eligible_for_pmp",
          "is_native_eligible_for_open",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "native_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "is_native_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_native_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_open must be checked"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "native_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field native_advertiser_floor"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        },
        "title": "BannerVideoNativeAdSlot"
      },
      "Deals": {
        "anyOf": [
          {
            "$ref": "#/components/requestBodies/PrivateAuctionDeal"
          },
          {
            "$ref": "#/components/requestBodies/ProgrammaticGuaranteedDeal"
          },
          {
            "$ref": "#/components/requestBodies/PreferredFixedPriceDeal"
          }
        ]
      },
      "Property": {
        "additionalProperties": false,
        "required": [
          "name",
          "publisher",
          "status",
          "is_application",
          "iab_categories"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Property status, possible values: 1(active) and 2(inactive)"
          },
          "publisher": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent publisher",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Publisher internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent publisher name"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "Property description"
          },
          "url": {
            "type": "string",
            "description": "Property url"
          },
          "iab_categories": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "type": "array",
            "description": "List of property categories"
          },
          "is_application": {
            "type": "boolean",
            "description": "Flag, set to true if property is application"
          },
          "external_id": {
            "type": "string",
            "description": "Property external id"
          },
          "name": {
            "type": "string",
            "description": "Property name"
          }
        },
        "title": "Property"
      },
      "Bidder": {
        "description": "Bidder",
        "title": "Bidder",
        "additionalProperties": false,
        "required": [
          "name",
          "status",
          "user_sync_url",
          "user_sync_url_secure",
          "send_not_synced_users",
          "gzip_compression",
          "iframe_wrapper",
          "direct_like_cookie_sync",
          "send_video_traffic",
          "send_native_traffic",
          "traffic_type",
          "sync_weight"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Bidder status, possible values: 1(active) and 2(inactive)"
          },
          "user_sync_url_secure": {
            "type": "string",
            "description": "Bidder user sync url secure"
          },
          "send_not_synced_users": {
            "type": "boolean",
            "description": "Allow to send not synced users"
          },
          "direct_like_cookie_sync": {
            "type": "boolean",
            "description": "Allow to use direct-like cookie sync"
          },
          "iframe_wrapper": {
            "type": "boolean",
            "description": "Allow to use iframe wrapper for sync URL users"
          },
          "user_sync_url": {
            "type": "string",
            "description": "Bidder user sync url"
          },
          "name": {
            "type": "string",
            "description": "Bidder Name"
          },
          "send_video_traffic": {
            "type": "boolean",
            "description": "Send video traffic"
          },
          "send_native_traffic": {
            "type": "boolean",
            "description": "Send native traffic"
          },
          "traffic_type": {
            "type": "string",
            "description": "Traffic type, possible values: all and pmp"
          },
          "gzip_compression": {
            "type": "boolean",
            "description": "Allow to use gzip compression"
          },
          "exchange_name": {
            "type": "string",
            "description": "Ext.ssp exchange name"
          },
          "sync_weight": {
            "type": "number",
            "description": "Syncing weight"
          }
        }
      },
      "SellerRegion": {
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "title": "SellerRegion"
      },
      "DataCenter": {
        "additionalProperties": false,
        "required": [
          "name",
          "region",
          "bidder",
          "bid_url"
        ],
        "type": "object",
        "properties": {
          "bid_url": {
            "type": "string",
            "description": "Datacenter bid url"
          },
          "status": {
            "type": "integer",
            "description": "Datacenter  status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "qps_limit": {
            "type": "integer",
            "description": "Datacenter qps limit > 0 (optional)"
          },
          "name": {
            "type": "string",
            "description": "Datacenter name"
          },
          "region": {
            "additionalProperties": false,
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "DatacenterRegion internal id, can not create data center with the same pair region/bidder"
              },
              "name": {
                "type": "string",
                "description": "DatacenterRegion name"
              }
            }
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Bidder internal id, can not create data center with the same pair region/bidder"
              },
              "name": {
                "type": "string",
                "description": "Bidder name"
              }
            }
          }
        },
        "title": "DataCenter"
      },
      "ApiFramework": {
        "description": "OpenRTB API framework",
        "title": "ApiFramework",
        "additionalProperties": false,
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Flag indicating if this API framework is enabled"
          },
          "version": {
            "type": "string",
            "description": "API framework version"
          },
          "name": {
            "type": "string",
            "description": "API framework name"
          }
        }
      },
      "BaseApproval": {
        "additionalProperties": false,
        "required": [
          "name",
          "creative_id",
          "creative_type",
          "status",
          "landing_page_url"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Creative approval status (approved/blocked)"
          },
          "source": {
            "type": "string",
            "description": "Creative approval source"
          },
          "landing_page_url": {
            "type": "string",
            "description": "Creative approval landing page. Must be a valid url string"
          },
          "name": {
            "type": "string",
            "description": "Creative approval name"
          },
          "creative_type": {
            "type": "string",
            "description": "Creative type. Allowed values are: vast, vpaid, banner"
          },
          "creative_id": {
            "type": "string",
            "description": "Creative ID. Must be unique per all approvals"
          },
          "cause": {
            "type": "string",
            "description": "Creative approval cause"
          }
        },
        "title": "BaseApproval"
      },
      "KruxSegment": {
        "description": "KRUX segment",
        "title": "KruxSegment",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "segment_id_long"
        ],
        "type": "object",
        "properties": {
          "plain_category": {
            "type": "string",
            "description": "Segment category"
          },
          "segment_type": {
            "type": "string",
            "description": "Segment type"
          },
          "sub_category": {
            "type": "string",
            "description": "Segment sub-category"
          },
          "segment_id": {
            "type": "string",
            "description": "Segment id, can not be changed once set, unique across all segments"
          },
          "name": {
            "type": "string",
            "description": "Segment name"
          },
          "last_compute_date": {
            "type": "string",
            "description": "Last compute date"
          },
          "type": {
            "type": "string",
            "description": "Internal type"
          },
          "segment_id_long": {
            "type": "string",
            "description": "Segment long id, can not be changed once set, unique across all segments"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        }
      }
    },
    "schemas": {
      "VideoProtocol": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "version",
          "title"
        ],
        "type": "object",
        "description": "Video ads protocols (VAST/VPAID)",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Flag indicating if this protocol is enabled"
          },
          "version": {
            "type": "string",
            "description": "Video protocol version"
          },
          "name": {
            "type": "string",
            "description": "Video protocol name"
          },
          "is_wrapper": {
            "type": "boolean",
            "description": "Flag indicating type of protocol (wrapper or inline)"
          },
          "title": {
            "type": "string",
            "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
          },
          "id": {
            "type": "integer",
            "description": "Video protocol OpenRTB ID"
          }
        }
      },
      "BannerAdSlot": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        }
      },
      "PrivateAuctionDeal": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "start_date",
          "end_date",
          "bid_floor",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "description": "Private auction deal",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "bid_floor": {
            "type": "number",
            "description": "Bid floor. > 0"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "id": {
            "type": "number",
            "description": "Deal internal ID"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "Segments": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/MasSegment"
          },
          {
            "$ref": "#/components/schemas/KruxSegment"
          }
        ]
      },
      "VideoAdSlot": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner/video/banner-video/banner-native/banner-video-native"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        }
      },
      "MasSegment": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "segment_id_long"
        ],
        "type": "object",
        "description": "MAS segment",
        "properties": {
          "plain_category": {
            "type": "string",
            "description": "Segment category"
          },
          "segment_type": {
            "type": "string",
            "description": "Segment type"
          },
          "sub_category": {
            "type": "string",
            "description": "Segment sub-category"
          },
          "name": {
            "type": "string",
            "description": "Segment name"
          },
          "id": {
            "type": "integer",
            "description": "Internal id"
          },
          "last_compute_date": {
            "type": "string",
            "description": "Last compute date"
          },
          "type": {
            "type": "string",
            "description": "Internal type"
          },
          "segment_id_long": {
            "type": "string",
            "description": "Segment id, can not be changed once set, unique across all segments"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        }
      },
      "NewSeat": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "external_id",
          "bidder"
        ],
        "type": "object",
        "description": "Seat",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "Seat external ID"
          },
          "bidder": {
            "type": "object",
            "description": "Seat parent bidder",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Bidder internal ID"
              },
              "name": {
                "type": "string",
                "description": "Bidder name"
              }
            }
          },
          "id": {
            "type": "integer",
            "description": "Seat internal ID"
          },
          "name": {
            "type": "string",
            "description": "Seat name"
          }
        }
      },
      "Employee": {
        "additionalProperties": false,
        "required": [
          "id",
          "last_name",
          "first_name",
          "email",
          "employee_group",
          "employee_roles"
        ],
        "type": "object",
        "description": "Employee",
        "properties": {
          "employee_group": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "Employee group internal ID"
              },
              "name": {
                "type": "string",
                "description": "Employee group name"
              }
            }
          },
          "last_name": {
            "type": "string",
            "description": "Employee last name"
          },
          "name": {
            "type": "string",
            "description": "Employee name (first_name + last_name), optional"
          },
          "first_name": {
            "type": "string",
            "description": "Employee first name"
          },
          "seller_region": {
            "type": "object",
            "description": "Seller region of employee, required only if 'Key Account Manager' or 'Sales Manager' in 'employee_roles' names",
            "properties": {
              "id": {
                "type": "number",
                "description": "Seller region group internal ID"
              },
              "name": {
                "type": "string",
                "description": "Seller region group name"
              }
            }
          },
          "email": {
            "type": "string",
            "description": "Employee email"
          },
          "employee_roles": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "Employee role internal ID"
                },
                "name": {
                  "type": "string",
                  "description": "Employee role name"
                }
              }
            },
            "type": "array",
            "description": "List of employee roles"
          },
          "id": {
            "type": "number",
            "description": "Employee internal ID"
          }
        }
      },
      "VideoAdFormat": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "id": {
            "type": "integer",
            "description": "Ad format internal id"
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        }
      },
      "GrapeshotCategory": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "key"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "key": {
            "type": "string",
            "description": "Key"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          }
        }
      },
      "MimeType": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "mime_type"
        ],
        "type": "object",
        "description": "MIME type",
        "properties": {
          "id": {
            "type": "integer",
            "description": "MIME type internal ID"
          },
          "mime_type": {
            "type": "string",
            "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
          },
          "name": {
            "type": "string",
            "description": "MIME type name"
          }
        }
      },
      "DatacenterRegion": {
        "additionalProperties": true,
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "BannerVideoAdSlot": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        }
      },
      "BrandTargeting": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "brands": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "value": {
            "type": "boolean"
          }
        }
      },
      "EmployeeGroup": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "group_type"
        ],
        "type": "object",
        "description": "Employee group",
        "properties": {
          "id": {
            "type": "number",
            "description": "Employee group internal ID"
          },
          "group_type": {
            "type": "string",
            "description": "Employee group type, can be \"admin\" or \"standard\" only"
          },
          "name": {
            "type": "string",
            "description": "Employee group name"
          }
        }
      },
      "Brand": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "is_open_auction_allowed",
          "is_pmp_allowed",
          "advertiser_domains"
        ],
        "type": "object",
        "properties": {
          "is_pmp_allowed": {
            "type": "boolean",
            "description": "Is PMP allowed"
          },
          "advertiser_domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of strings. Each domain is unique across all brands. At least one of advertiser_domains are required"
          },
          "is_open_auction_allowed": {
            "type": "boolean",
            "description": "Is open auction allowed"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Unique across all brands"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NativeAdFormat": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "id": {
            "type": "integer",
            "description": "Ad format internal id"
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        }
      },
      "AdSlots": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BannerAdSlot"
          },
          {
            "$ref": "#/components/schemas/VideoAdSlot"
          },
          {
            "$ref": "#/components/schemas/BannerVideoAdSlot"
          },
          {
            "$ref": "#/components/schemas/BannerNativeAdSlot"
          },
          {
            "$ref": "#/components/schemas/BannerVideoNativeAdSlot"
          }
        ]
      },
      "AdFormats": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/VideoAdFormat"
          },
          {
            "$ref": "#/components/schemas/NativeAdFormat"
          },
          {
            "$ref": "#/components/schemas/BannerAdFormat"
          }
        ]
      },
      "BannerNativeAdSlot": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_native_eligible_for_pmp",
          "is_native_eligible_for_open"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "native_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_native_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "is_native_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_open must be checked"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "native_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field native_advertiser_floor"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        }
      },
      "GlobalHistory": {
        "additionalProperties": false,
        "required": [
          "action",
          "datetime",
          "data",
          "user",
          "entity"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "datetime": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "user": {
            "type": "object",
            "nullable": true
          },
          "entity": {
            "type": "object"
          }
        }
      },
      "Publisher": {
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Status. Can be 1(Active) or 2(Inactive)"
          },
          "name": {
            "type": "string",
            "description": "Publisher name"
          },
          "pricing_type": {
            "type": "string",
            "description": "Can accept these values: revshare, daily_revshare, cpm. Required and shown only if private_autcion_payout_model == 'revshare' OR preferred_fixed_rate_payout_model == 'revshare' OR open_auction_payout_model == 'revshare'. In other cases must be null."
          },
          "id": {
            "type": "integer",
            "description": "Publisher internal id"
          },
          "private_auction_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "open_auction_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          },
          "open_auction_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "private_auction_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          },
          "ad_format_floors": {
            "items": {
              "type": "object",
              "properties": {
                "floor_cpm": {
                  "type": "number",
                  "description": "Corresponding ad format floor"
                },
                "private_auction_pmp_floor_cpm": {
                  "type": "number",
                  "description": "Read only. floor_cpm / private_auction_revshare_value"
                },
                "ad_format": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Internal AdFormat id. Must actually exists"
                    }
                  }
                },
                "preferred_fixed_rate_pmp_floor_cpm": {
                  "type": "number",
                  "description": "Read only. floor_cpm / preferred_fixed_rate_revshare_value"
                }
              }
            },
            "type": "array",
            "description": "Ad format floors array. Must not contain duplicated ad formats, floor must be >= 0, ad formats must exist"
          },
          "external_id": {
            "type": "string",
            "description": "Publisher external id. Unique per all publishers"
          },
          "preferred_fixed_rate_revshare_value": {
            "type": "number",
            "description": "Must be greater than 0 and lesser or equal 100. (0; 100]"
          },
          "preferred_fixed_rate_payout_model": {
            "type": "string",
            "description": "Can accept these values: revshare, floor_cpm, fixed_rate_cpm"
          }
        }
      },
      "BannerAdFormat": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "external_id",
          "is_multiple_targeting"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Ad format type. Can be banner/video/native"
          },
          "is_multiple_targeting": {
            "type": "boolean",
            "description": "Is multiple targeting"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Can be digits only."
          },
          "id": {
            "type": "integer",
            "description": "Ad format internal id"
          },
          "name": {
            "type": "string",
            "description": "Ad format name"
          }
        }
      },
      "ProgrammaticGuaranteedDeal": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "external_id",
          "start_date",
          "end_date",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "description": "Programmatic guaranteed deal",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "id": {
            "type": "number",
            "description": "Deal internal ID"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "PreferredFixedPriceDeal": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "start_date",
          "end_date",
          "first_look_cpm",
          "priority",
          "no_publishers_floor",
          "is_kargo_built_creative",
          "status",
          "ad_formats",
          "bidder"
        ],
        "type": "object",
        "description": "Preferred fixed price deal",
        "properties": {
          "status": {
            "type": "number",
            "description": "Deal status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "name": {
            "type": "string",
            "description": "Deal name"
          },
          "end_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'. Must be less than start_date"
          },
          "is_kargo_built_creative": {
            "type": "boolean",
            "description": "Is Kargo built creative"
          },
          "external_id": {
            "type": "number",
            "description": "Deal kargo external id. Optional. Unchangeable. Unique across deals"
          },
          "start_date": {
            "type": "string",
            "description": "Deal start date. Format Year-Month-Day. For example, '2020-10-06'"
          },
          "priority": {
            "type": "string",
            "description": "Deal priority. Can be lowest/standard/highest"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format internal type. Required for deals."
                },
                "id": {
                  "type": "number",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Ad formats. Can be [], can be null. Can not select multiple formats with 'multiple_Targeting' field = False. Can select only multiple ad_formats with true. For example, Anchor and Top Banner can not be selected. But To banner and Bottom banner can"
          },
          "seats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "value": {
                  "type": "boolean",
                  "description": "Include (true) or exclude (false) current targeting item"
                }
              }
            },
            "type": "array",
            "description": "Whitelist/Blacklist seat targeting. Not required, only seats of deal linked bidder can be selected. Duplications are not allowed."
          },
          "id": {
            "type": "number",
            "description": "Deal internal ID"
          },
          "deal_id": {
            "type": "string",
            "description": "Deal id. Optional, autogenerated if missed in request or null, based on bidder_targeting. Unchangeable. Unique across deals."
          },
          "type": {
            "type": "string",
            "description": "Deal internal type. Unchangeable. Can only be private_auction/preferred_fixed_price/programmatic_guaranteed"
          },
          "first_look_cpm": {
            "type": "number",
            "description": "First look CPM. > 0"
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Selected bidder internal id"
              },
              "name": {
                "type": "string",
                "description": "Selected bidder name"
              }
            }
          },
          "no_publishers_floor": {
            "type": "boolean",
            "description": "No publishers floor"
          }
        }
      },
      "EmployeeRole": {
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "BannerVideoNativeAdSlot": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "property",
          "type",
          "tag_type",
          "status",
          "is_interstitial",
          "position_type",
          "is_banner_eligible_for_pmp",
          "is_banner_eligible_for_open",
          "is_native_eligible_for_pmp",
          "is_native_eligible_for_open",
          "is_video_eligible_for_pmp",
          "is_video_eligible_for_open",
          "min_duration",
          "max_duration",
          "linearity",
          "mime_types",
          "video_protocols"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - Active, 2 for Inactive"
          },
          "max_duration": {
            "type": "integer",
            "description": "Max video duration. >0. Must be > min_duration"
          },
          "external_id": {
            "type": "string",
            "description": "External id. Must be unique across all ad slots"
          },
          "banner_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field banner_advertiser_floor"
          },
          "linearity": {
            "type": "string",
            "description": "Video linearity. Can be only linear_in_stream/non_linear_overlay values"
          },
          "is_interstitial": {
            "type": "boolean",
            "description": "Is interstitial"
          },
          "min_duration": {
            "type": "integer",
            "description": "Min video duration. >=0"
          },
          "ad_formats": {
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Ad format type"
                },
                "id": {
                  "type": "integer",
                  "description": "Ad format internal id"
                },
                "name": {
                  "type": "string",
                  "description": "Ad format name"
                }
              }
            },
            "type": "array",
            "description": "Array of AdFormats. Can be null, can be [], must consist of objects with target adformats id, name"
          },
          "video_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field video_advertiser_floor"
          },
          "native_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "is_banner_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_pmp must be checked"
          },
          "mime_types": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "MIME type internal ID"
                },
                "mime_type": {
                  "type": "string",
                  "description": "Valid MIME type string. E.g. 'application/xml', 'video/3gpp', etc."
                },
                "name": {
                  "type": "string",
                  "description": "MIME type name"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed MIME type objects"
          },
          "id": {
            "type": "integer",
            "description": "Ad slot internal id"
          },
          "api_frameworks": {
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "API framework version"
                },
                "id": {
                  "type": "integer",
                  "description": "API framework OpenRTB ID"
                },
                "name": {
                  "type": "string",
                  "description": "API framework name"
                },
                "title": {
                  "type": "string",
                  "description": "API framework title. E.g. 'VPAID 2.0'"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed OpenRTB API frameworks"
          },
          "property": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Property internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent property name"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Ad slot name"
          },
          "is_banner_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_banner_eligible_for_open must be checked"
          },
          "video_protocols": {
            "items": {
              "type": "object",
              "properties": {
                "is_enabled": {
                  "type": "boolean",
                  "description": "Flag indicating if this protocol is enabled"
                },
                "version": {
                  "type": "string",
                  "description": "Video protocol version"
                },
                "name": {
                  "type": "string",
                  "description": "Video protocol name"
                },
                "is_wrapper": {
                  "type": "boolean",
                  "description": "Flag indicating type of protocol (wrapper or inline)"
                },
                "title": {
                  "type": "string",
                  "description": "Video protocol title. E.g. 'VAST 2.0 Wrapper'"
                },
                "id": {
                  "type": "integer",
                  "description": "Video protocol OpenRTB ID"
                }
              }
            },
            "type": "array",
            "description": "Array of allowed video ads protocols (VAST/VPAID)"
          },
          "is_native_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_pmp must be checked"
          },
          "is_video_eligible_for_open": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_pmp must be checked"
          },
          "platform_type": {
            "type": "string",
            "description": "Can be mobile_web/tablet_web/mobile_app/tablet_app values"
          },
          "expandable_directions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of strings. Any string can be on of up/down/left/right/fullscreen values"
          },
          "video_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "position_type": {
            "type": "string",
            "description": "Can be above_fold/below_fold/fullscreen values"
          },
          "is_native_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_native_eligible_for_open must be checked"
          },
          "is_video_eligible_for_pmp": {
            "type": "boolean",
            "description": "Either this or is_video_eligible_for_open must be checked"
          },
          "type": {
            "type": "string",
            "description": "Ad slot internal type. May only be banner,video,banner/video,banner/native,banner/video/native"
          },
          "native_publisher_floor": {
            "type": "number",
            "description": "\\>=0. Has read-only brother field native_advertiser_floor"
          },
          "banner_advertiser_floor": {
            "type": "number",
            "description": "Read only"
          },
          "tag_type": {
            "type": "string",
            "description": "Can be image/iframe/javascript values"
          }
        }
      },
      "Deals": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PrivateAuctionDeal"
          },
          {
            "$ref": "#/components/schemas/ProgrammaticGuaranteedDeal"
          },
          {
            "$ref": "#/components/schemas/PreferredFixedPriceDeal"
          }
        ]
      },
      "Property": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "publisher",
          "status",
          "is_application",
          "iab_categories"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Property status, possible values: 1(active) and 2(inactive)"
          },
          "publisher": {
            "additionalProperties": true,
            "type": "object",
            "description": "Parent publisher",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Publisher internal id"
              },
              "name": {
                "type": "string",
                "description": "Parent publisher name"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "Property description"
          },
          "url": {
            "type": "string",
            "description": "Property url"
          },
          "iab_categories": {
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "type": "array",
            "description": "List of property categories"
          },
          "is_application": {
            "type": "boolean",
            "description": "Flag, set to true if property is application"
          },
          "external_id": {
            "type": "string",
            "description": "Property external id"
          },
          "id": {
            "type": "integer",
            "description": "Property internal id"
          },
          "name": {
            "type": "string",
            "description": "Property name"
          }
        }
      },
      "Bidder": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "status",
          "user_sync_url",
          "user_sync_url_secure",
          "send_not_synced_users",
          "gzip_compression",
          "iframe_wrapper",
          "direct_like_cookie_sync",
          "send_video_traffic",
          "send_native_traffic",
          "traffic_type",
          "sync_weight"
        ],
        "type": "object",
        "description": "Bidder",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Bidder status, possible values: 1(active) and 2(inactive)"
          },
          "user_sync_url_secure": {
            "type": "string",
            "description": "Bidder user sync url secure"
          },
          "send_not_synced_users": {
            "type": "boolean",
            "description": "Allow to send not synced users"
          },
          "name": {
            "type": "string",
            "description": "Bidder Name"
          },
          "direct_like_cookie_sync": {
            "type": "boolean",
            "description": "Allow to use direct-like cookie sync"
          },
          "iframe_wrapper": {
            "type": "boolean",
            "description": "Allow to use iframe wrapper for sync URL users"
          },
          "user_sync_url": {
            "type": "string",
            "description": "Bidder user sync url"
          },
          "id": {
            "type": "integer",
            "description": "Bidder ID"
          },
          "send_video_traffic": {
            "type": "boolean",
            "description": "Send video traffic"
          },
          "send_native_traffic": {
            "type": "boolean",
            "description": "Send native traffic"
          },
          "traffic_type": {
            "type": "string",
            "description": "Traffic type, possible values: all and pmp"
          },
          "gzip_compression": {
            "type": "boolean",
            "description": "Allow to use gzip compression"
          },
          "exchange_name": {
            "type": "string",
            "description": "Ext.ssp exchange name"
          },
          "sync_weight": {
            "type": "number",
            "description": "Syncing weight"
          }
        }
      },
      "SellerRegion": {
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DataCenter": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "region",
          "bidder",
          "bid_url"
        ],
        "type": "object",
        "properties": {
          "bid_url": {
            "type": "string",
            "description": "Datacenter bid url"
          },
          "status": {
            "type": "integer",
            "description": "Datacenter  status. Can be 1 or 2. 1 - Active, 2 - Inactive"
          },
          "qps_limit": {
            "type": "integer",
            "description": "Datacenter qps limit > 0 (optional)"
          },
          "name": {
            "type": "string",
            "description": "Datacenter name"
          },
          "region": {
            "additionalProperties": false,
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "DatacenterRegion internal id, can not create data center with the same pair region/bidder"
              },
              "name": {
                "type": "string",
                "description": "DatacenterRegion name"
              }
            }
          },
          "bidder": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Bidder internal id, can not create data center with the same pair region/bidder"
              },
              "name": {
                "type": "string",
                "description": "Bidder name"
              }
            }
          },
          "id": {
            "type": "integer",
            "description": "Datacenter internal id"
          }
        }
      },
      "ApiFramework": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "version"
        ],
        "type": "object",
        "description": "OpenRTB API framework",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Flag indicating if this API framework is enabled"
          },
          "version": {
            "type": "string",
            "description": "API framework version"
          },
          "id": {
            "type": "integer",
            "description": "API framework OpenRTB ID"
          },
          "name": {
            "type": "string",
            "description": "API framework name"
          }
        }
      },
      "BaseApproval": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "creative_id",
          "creative_type",
          "status",
          "landing_page_url"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Creative approval status (approved/blocked)"
          },
          "name": {
            "type": "string",
            "description": "Creative approval name"
          },
          "creative_type": {
            "type": "string",
            "description": "Creative type. Allowed values are: vast, vpaid, banner"
          },
          "creative_id": {
            "type": "string",
            "description": "Creative ID. Must be unique per all approvals"
          },
          "source": {
            "type": "string",
            "description": "Creative approval source"
          },
          "landing_page_url": {
            "type": "string",
            "description": "Creative approval landing page. Must be a valid url string"
          },
          "cause": {
            "type": "string",
            "description": "Creative approval cause"
          },
          "id": {
            "type": "integer",
            "description": "Creative approval internal id"
          }
        }
      },
      "KruxSegment": {
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "segment_id_long"
        ],
        "type": "object",
        "description": "KRUX segment",
        "properties": {
          "plain_category": {
            "type": "string",
            "description": "Segment category"
          },
          "segment_type": {
            "type": "string",
            "description": "Segment type"
          },
          "sub_category": {
            "type": "string",
            "description": "Segment sub-category"
          },
          "name": {
            "type": "string",
            "description": "Segment name"
          },
          "segment_id": {
            "type": "string",
            "description": "Segment id, can not be changed once set, unique across all segments"
          },
          "id": {
            "type": "integer",
            "description": "Internal id"
          },
          "last_compute_date": {
            "type": "string",
            "description": "Last compute date"
          },
          "type": {
            "type": "string",
            "description": "Internal type"
          },
          "segment_id_long": {
            "type": "string",
            "description": "Segment long id, can not be changed once set, unique across all segments"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        }
      }
    }
  },
  "tags": [],
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://rc-kargo.ui.iponweb.net/api",
      "description": "API server"
    }
  ]
}